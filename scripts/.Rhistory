ggplot(subset(t,gc+exp.freq!=5.05 ),aes(x=spread.n))+geom_histogram(color="white",binwidth = 0.001)#+facet_wrap(~gc)
freq<-read.csv("~/Desktop/benchmarking_frequency_copy.csv",stringsAsFactors = F,skip = 1)
require(plyr)
freq<-mutate(freq,spread = freq.var - exp.freq)
require(ggplot2)
ggplot(freq,aes(x=spread))+geom_histogram(color="white",binwidth = 0.01)
ggplot(freq,aes(x=spread))+geom_histogram(color="white",binwidth = 0.001)
t<-ddply(freq,~mutation,function(x){
first = subset(x,exp.freq==0.05 & gc==5)
n_factor=first$freq.var/0.05 # normalization factor
x$n_factor=n_factor
x<-mutate(x,freq.n = freq.var/n_factor,spread.n = freq.n-exp.freq)
return(x)
})
ggplot(subset(t,gc+exp.freq!=5.05 ),aes(x=spread.n))+geom_histogram(color="white",binwidth = 0.001)#+facet_wrap(~gc)
ggplot(subset(t,gc+exp.freq!=5.05 ),aes(x=spread.n))+geom_histogram(color="white",binwidth = 0.01)+facet_wrap(~gc)
ggplot(subset(t,gc+exp.freq!=5.05 ),aes(x=spread.n))+geom_histogram(color="white",binwidth = 0.01)#+facet_wrap(~gc)
ggplot(subset(t,gc+exp.freq!=5.05 ),aes(x=spread.n))+geom_histogram(color="white",binwidth = 0.01)+facet_wrap(~gc)
ggplot(subset(t,gc+exp.freq!=5.05 ),aes(x=spread.n,fill=gc))+geom_histogram(color="white",position='dodge',binwidth = 0.01)
ggplot(subset(t,gc+exp.freq!=5.05 ),aes(x=spread.n,fill=as.factor(gc)))+geom_histogram(color="white",position='dodge',binwidth = 0.01)
ggplot(subset(t,gc+exp.freq!=5.05 ),aes(x = gc,y=abs(spread.n),fill=as.factor(gc)))+geom_histogram(color="white",position='dodge',binwidth = 0.01)
ggplot(subset(t,gc+exp.freq!=5.05 ),aes(x = gc,y=abs(spread.n)))+geom_point()
ggplot(subset(t,gc+exp.freq!=5.05 ),aes(x = gc,y=abs(spread.n)))+geom_point()+scale_y_reverse()
ggplot(subset(t,gc+exp.freq!=5.05 ),aes(x = gc,y=abs(spread.n)))+geom_point()+scale_x_reverse()
ggplot(subset(t,gc+exp.freq!=5.05 ),aes(x = gc,y=abs(spread.n)))+geom_point()#+scale_x_reverse()
ggplot(subset(t,gc+exp.freq!=5.05 ),aes(x = exp.freq,y=abs(spread.n)))+geom_point()#+scale_x_reverse()
unlink('Desktop/exp_obs_freq_cache', recursive = TRUE)
trans_freq<-read.csv("./transmission_pairs_freq.poly.donor.csv") # Read in the freq.variant calls from the transmission setup Rmd
subset(trans_freq,freq1<0.5 & found==TRUE)
nrow(subset(trans_freq,freq1<0.5 & found==TRUE))
nrow(subset(trans_freq,found==TRUE))
nrow(subset(trans_freq,freq2==1))
nrow(subset(trans_freq,freq2==1& ref==var()))
nrow(subset(trans_freq,freq2==1& ref==var))
freq<-read.csv("~/Desktop/benchmarking_frequency_copy.csv",stringsAsFactors = F,skip = 1)
require(plyr)
freq<-mutate(freq,spread = freq.var - exp.freq)
require(ggplot2)
freq<-subset(freq,exp.freq>=0.02)
ggplot(freq,aes(x=spread))+geom_histogram(color="white",binwidth = 0.01)
t<-ddply(freq,~mutation,function(x){
first = subset(x,exp.freq==0.05 & gc==5)
n_factor=first$freq.var/0.05 # normalization factor
x$n_factor=n_factor
x<-mutate(x,freq.n = freq.var/n_factor,spread.n = freq.n-exp.freq)
return(x)
})
ggplot(subset(t,gc+exp.freq!=5.05 ),aes(x=spread.n))+geom_histogram(color="white",binwidth = 0.01)#+facet_wrap(~gc)
ggplot(subset(t,gc+exp.freq!=5.05 ),aes(x=spread.n,fill=as.factor(gc)))+geom_histogram(color="white",position='dodge',binwidth = 0.01)
ggplot(subset(t,gc+exp.freq!=5.05 ),aes(x = gc,y=abs(spread.n)))+geom_point()#+scale_x_reverse()
ggplot(subset(t,gc+exp.freq!=5.05 ),aes(x = exp.freq,y=abs(spread.n)))+geom_point()#+scale_x_reverse()
fit4<-subset(t,gc==4 & spread.n<0.1)
mean(fit4$spread.n)
v = var(fit4$spread.n)
v
dnorm(seq(-0.1,0.1,0.01),mean=0,sd = sqrt(v))
x= seq(-0.1,0.1,0.01)
plot(x,dnorm(x,mean=0,sd = sqrt(v)))
require(knitr)
require(ggplot2)
require(plyr)
require(reshape2)
require(extrafont)
require(wesanderson)
set.seed(42) # Set seed so randomization is reproducible
opts_chunk$set(fig.align="center",warning=FALSE,tidy=T,cache = T,echo=F)
theme_set(new = theme_classic()+ theme(
axis.line.x = element_line(colour = 'black', size=0.5, linetype='solid'),
axis.line.y = element_line(colour ='black',size=0.5,linetype='solid'),
text=element_text(family="Arial Narrow",size = 18))) # to make nice plots
# A couple color palette options.
#cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
cbPalette <- wes_palette("Zissou")
source("../../scripts/useful_functions.R")
fits<-read.csv("../difusion_simulated_results.csv")
head(fits)
mean(fits$Ne)
IQR(fits$Ne)
median(fits$Ne)
summary(fits)
summary(fits$Ne)
ggplot(fits,aes(x=Ne))+geom_histogram()
ggplot(fits,aes(x=Ne))+geom_histogram(color="white")
setwd("~/variant_pipeline/scripts")
suppressMessages(library("tools"))
suppressMessages(library("plyr"))
suppressMessages(library("deepSNV"))
suppressMessages(library("reshape2"))
suppressMessages(library("magrittr"))
suppressMessages(library("tidyverse"))
set.seed(42)
args <- commandArgs(TRUE)
if (length(args) != 10) {
stop(paste("Usage:", "deepSNV.R" ," {reference.fasta} {test.bam} {control.bam} {c(BH,bonferroni)} {p.val.cut} {c(fisher,average,max)}  {c(two.sided,one.sided,bin)} {stringent_freq} output.csv output.fa",sep=""), call.=FALSE)
}
get_counts <- function(x,deepx){
pos<-x$pos
mat_pos<-x$row
test(deepx)->counts
base = x$var
n.tst.fw = counts[mat_pos,base]
n.tst.bw = counts[mat_pos,tolower(base)]
cov.tst.fw = sum(counts[mat_pos,c(1:5)])
cov.tst.bw = sum(counts[mat_pos,c(6:10)])
# now for the control
control(deepx)->counts.con
n.ctrl.fw = counts.con[mat_pos,base]
n.ctrl.bw = counts.con[mat_pos,tolower(base)]
cov.ctrl.fw = sum(counts.con[mat_pos,c(1:5)])
cov.ctrl.bw = sum(counts.con[mat_pos,c(6:10)])
out = data.frame(chr = x$chr,
pos = x$pos,
var = base,
n.tst.fw = n.tst.fw,
n.tst.bw = n.tst.bw,
cov.tst.fw = cov.tst.fw,
cov.tst.bw = cov.tst.bw,
n.ctrl.fw = n.ctrl.fw,
n.ctrl.bw = n.ctrl.bw,
cov.ctrl.fw = cov.ctrl.fw,
cov.ctrl.bw = cov.ctrl.bw)
}
reference.fasta<-"../tutorial/data/reference/wsn33_wt_plasmid.fa"
reference.fasta<-"~/Desktop/scratch/checking_calls/cali09_2/1143_cali09_2.removed.bam"
test.bam<-"~/Desktop/scratch/checking_calls/cali09_2/1143_cali09_2.removed.bam"
control.bam<-"~/Desktop/scratch/checking_calls/cali09_2/Cali_pool.removed.bam"
reference.fasta<-"~/Documents/Analysis/HIVE/data/reference/cali09.fa"
p.cut<-0.1
p.com.meth<-"bonferroni"
disp<-"two.sided"
stringent_freq<-0.5
test_file_prefix = basename(file_path_sans_ext(test.bam))
control_file_prefix = basename(file_path_sans_ext(control.bam))
output_file_name = paste0("deepSNV/",test_file_prefix)
sample_name=strsplit(test_file_prefix,".",fixed=T)[[1]][1]
control_name=strsplit(control_file_prefix,".",fixed=T)[[1]][1]
output_file_control=paste0("deepSNV/",control_file_prefix)
print(paste0("test is :",sample_name ))
print(paste0("control is:",control_name))
cat(paste("loading regions from [", reference.fasta, "]...\n", sep=""))
segments <- fasta.info(reference.fasta)
regions<-data.frame(chr = c("PB2","PB1","PA","HA"),start = c(100,100,100,100),stop= c(500,500,500,500))
cat("calling variants with deepSNV\n")
cat(paste("\ttest [",test.bam,"]\n\tcontrol [",control.bam,"]...\n", sep=""))
deepsnv.result <- deepSNV(test=test.bam, control=control.bam, regions=regions.bed,combine.method=p.com.meth,q=30) # This calls the variants using the binomial
regions.bed<-regions
deepsnv.result <- deepSNV(test=test.bam, control=control.bam, regions=regions.bed,combine.method=p.com.meth,q=30) # This calls the variants using the binomial
test.bam<-"/Users/jt/Desktop/scratch/checking_calls/cali09_2/1143_cali09_2.removed.bam"
deepsnv.result <- deepSNV(test=test.bam, control=control.bam, regions=regions.bed,combine.method=p.com.meth,q=30) # This calls the variants using the binomial
control.bam<-"/Users/jt/Desktop/scratch/checking_calls/cali09_2/Cali_pool.removed.bam"
deepsnv.result <- deepSNV(test=test.bam, control=control.bam, regions=regions.bed,combine.method=p.com.meth,q=30) # This calls the variants using the binomial
p.com.meth
p.com.meth<-"fisher"
deepsnv.result <- deepSNV(test=test.bam, control=control.bam, regions=regions.bed,combine.method=p.com.meth,q=30) # This calls the variants using the binomial
if(disp=="two.sided"){
deepsnv.result<-estimateDispersion(deepsnv.result,alternative="two.sided")
}else if (disp=="one.sided"){
deepsnv.result<-estimateDispersion(deepsnv.result) # one sided is the default
}else{
deepsnv.result<-deepsnv.result
}
deepsnv_sum<-summary(deepsnv.result,sig.level=as.numeric(p.cut), adjust.method=method)
method<-"bonferroni"
deepsnv_sum<-summary(deepsnv.result,sig.level=as.numeric(p.cut), adjust.method=method)
deepsnv_sum<-subset(deepsnv_sum,freq.var<stringent_freq)
RF(test(deepsnv.result),total=T)->frequencies # Get the frequencies of all the bases at each prosition
cbind(coordinates(deepsnv.result),frequencies)->frequencies.df
names(frequencies.df)[names(frequencies.df)=="-"]<-"indel" # for ease of handling below
frequencies.df$row<-1:nrow(frequencies.df)
frequencies.df %>% gather(var,freq.var,A:indel)->frequencies.df # long form
subset(frequencies.df,freq.var>=stringent_freq)->less_stringent
less_stringent %>% adply(1,get_counts,deepsnv.result) -> less_stringent.format # formatted like deepsnv df
head(frequencies.df)
suppressMessages(library("magrittr"))
suppressMessages(library("tidyverse"))
set.seed(42)
args <- commandArgs(TRUE)
if (length(args) != 10) {
stop(paste("Usage:", "deepSNV.R" ," {reference.fasta} {test.bam} {control.bam} {c(BH,bonferroni)} {p.val.cut} {c(fisher,average,max)}  {c(two.sided,one.sided,bin)} {stringent_freq} output.csv output.fa",sep=""), call.=FALSE)
}
get_counts <- function(x,counts,counts.con){
pos<-x$pos
mat_pos<-x$row
base = x$var
n.tst.fw = counts[mat_pos,base]
n.tst.bw = counts[mat_pos,tolower(base)]
cov.tst.fw = sum(counts[mat_pos,c(1:5)])
cov.tst.bw = sum(counts[mat_pos,c(6:10)])
# now for the control
n.ctrl.fw = counts.con[mat_pos,base]
n.ctrl.bw = counts.con[mat_pos,tolower(base)]
cov.ctrl.fw = sum(counts.con[mat_pos,c(1:5)])
cov.ctrl.bw = sum(counts.con[mat_pos,c(6:10)])
out = data.frame(chr = x$chr,
pos = x$pos,
var = base,
n.tst.fw = n.tst.fw,
n.tst.bw = n.tst.bw,
cov.tst.fw = cov.tst.fw,
cov.tst.bw = cov.tst.bw,
n.ctrl.fw = n.ctrl.fw,
n.ctrl.bw = n.ctrl.bw,
cov.ctrl.fw = cov.ctrl.fw,
cov.ctrl.bw = cov.ctrl.bw)
}
test_file_prefix = basename(file_path_sans_ext(test.bam))
control_file_prefix = basename(file_path_sans_ext(control.bam))
output_file_name = paste0("deepSNV/",test_file_prefix)
sample_name=strsplit(test_file_prefix,".",fixed=T)[[1]][1]
control_name=strsplit(control_file_prefix,".",fixed=T)[[1]][1]
output_file_control=paste0("deepSNV/",control_file_prefix)
print(paste0("test is :",sample_name ))
print(paste0("control is:",control_name))
cat(paste("loading regions from [", reference.fasta, "]...\n", sep=""))
segments <- fasta.info(reference.fasta)
regions.bed <- data.frame(chr = gsub("[ ].*","", names(segments)), start=1, stop=segments, row.names=NULL)
regions.bed
cat("calling variants with deepSNV\n")
cat(paste("\ttest [",test.bam,"]\n\tcontrol [",control.bam,"]...\n", sep=""))
deepsnv.result <- deepSNV(test=test.bam, control=control.bam, regions=regions.bed,combine.method=p.com.meth,q=30) # This calls the variants using the binomial
if(disp=="two.sided"){
deepsnv.result<-estimateDispersion(deepsnv.result,alternative="two.sided")
}else if (disp=="one.sided"){
deepsnv.result<-estimateDispersion(deepsnv.result) # one sided is the default
}else{
deepsnv.result<-deepsnv.result
}
deepsnv_sum<-summary(deepsnv.result,sig.level=as.numeric(p.cut), adjust.method=method)
deepsnv_sum<-subset(deepsnv_sum,freq.var<stringent_freq)
print(deepsnv_sum)
RF(test(deepsnv.result),total=T)->frequencies # Get the frequencies of all the bases at each prosition
cbind(coordinates(deepsnv.result),frequencies)->frequencies.df
names(frequencies.df)[names(frequencies.df)=="-"]<-"indel" # for ease of handling below
frequencies.df$row<-1:nrow(frequencies.df)
frequencies.df %>% gather(var,freq.var,A:indel)->frequencies.df # long form
subset(frequencies.df,freq.var>=stringent_freq & var!="indel")->less_stringent
head(less_stringent)
head(frequencies.df)
head(frequencies)
nrow(frequencies)
cbind(coordinates(deepsnv.result),frequencies)->frequencies.df
head(frequencies.df)
cooridnates(deepsnv.result)
coordinates(deepsnv.result)
positions<-data.frame()
names(positions)<-c("chr","pos")
positions
positions<-data.frame(names=c("chr","pos"))
positions
positions<-data.frame(chr=character(),
pos = integer())
position
positions
names(positions)
cors<-coordinates(deepsnv.result)
head(cors)
for(i in 1:length(names(cors))){
seg.df<-data.frame(chr=cors[paste('chr',i,sep=".")],pos = cors[paste('pos',i,sep=".")])
positions<-rbind(positions,seg.df)
}
head(seg.df)
head(positions)
positions<-data.frame(chr=character(),
pos = integer())
cors<-coordinates(deepsnv.result)
for(i in 1:length(names(cors))){
seg.df<-data.frame(chr=cors[,paste('chr',i,sep=".")],pos = cors[,paste('pos',i,sep=".")])
positions<-rbind(positions,seg.df)
}
cors["chr.1"]
cors["chr.1",]
cors[,"chr.1"]
seg = paste('chr',i,sep=".")
pos_col = paste('pos',i,sep=".")
seg
i = 1
seg = paste('chr',i,sep=".")
pos_col = paste('pos',i,sep=".")
seg
cors[,seg]
cors[,pos_col]
positions<-data.frame(chr=character(),
pos = integer())
cors<-coordinates(deepsnv.result)
for(i in 1:length(names(cors))){
seg = paste('chr',i,sep=".")
pos_col = paste('pos',i,sep=".")
seg.df<-data.frame(chr=cors[,seg],pos = cors[,pos_col])
positions<-rbind(positions,seg.df)
}
for(i in 1:length(names(cors))/2){
seg = paste('chr',i,sep=".")
pos_col = paste('pos',i,sep=".")
seg.df<-data.frame(chr=cors[,seg],pos = cors[,pos_col])
positions<-rbind(positions,seg.df)
}
i
for(i in 1:(length(names(cors))/2)){
seg = paste('chr',i,sep=".")
pos_col = paste('pos',i,sep=".")
seg.df<-data.frame(chr=cors[,seg],pos = cors[,pos_col])
positions<-rbind(positions,seg.df)
}
head(positions)
cbind(positions,frequencies)->frequencies.df
head(frequencies.df)
names(frequencies.df)[names(frequencies.df)=="-"]<-"indel" # for ease of handling below
frequencies.df$row<-1:nrow(frequencies.df)
frequencies.df %>% gather(var,freq.var,A:indel)->frequencies.df # long form
subset(frequencies.df,freq.var>=stringent_freq & var!="indel")->less_stringent
head(less_stringent)
test_counts<-test(deepsnv.result)
ctrl_counts<-control(deepsnv.result)
less_stringent %>% adply(1,get_counts,test_counts,ctrl_counts) -> less_stringent.format # formatted like deepsnv df
head(test_counts)
head(ctrl_counts)
head(less_stringent)
max(less_stringent$row)
dim(test_counts)
head(frequencies.df)
head(frequencies)
cbind(positions,frequencies)->frequencies.df
head(frequencies.df)
dim(frequencies.df)
positions<-data.frame(chr=character(),
pos = integer())
cors<-coordinates(deepsnv.result)
for(i in 1:(length(names(cors))/2)){
seg = paste('chr',i,sep=".")
pos_col = paste('pos',i,sep=".")
seg.df<-data.frame(chr=cors[,seg],pos = cors[,pos_col])
positions<-rbind(positions,seg.df)
}
cbind(positions,frequencies)->frequencies.df
dim(frequencies.df)
names(frequencies.df)[names(frequencies.df)=="-"]<-"indel" # for ease of handling below
frequencies.df$row<-1:nrow(frequencies.df)
frequencies.df %>% gather(var,freq.var,A:indel)->frequencies.df # long form
subset(frequencies.df,freq.var>=stringent_freq & var!="indel")->less_stringent
test_counts<-test(deepsnv.result)
ctrl_counts<-control(deepsnv.result)
less_stringent %>% adply(1,get_counts,test_counts,ctrl_counts) -> less_stringent.format # formatted like deepsnv df
head(less_stringent.format)
RF(control(deepsnv.result),total=T)->con.freq
cbind(coordinates(deepsnv.result),con.freq)->df.con
head(df.con)
set_cord<-function(deepsnv.result){
positions<-data.frame(chr=character(),
pos = integer())
cors<-coordinates(deepsnv.result)
for(i in 1:(length(names(cors))/2)){
seg = paste('chr',i,sep=".")
pos_col = paste('pos',i,sep=".")
seg.df<-data.frame(chr=cors[,seg],pos = cors[,pos_col])
positions<-rbind(positions,seg.df)
}
cbind(positions,frequencies)->frequencies.df
}
frequencies.df<-set_cord(deepsnv.result)
head(frequencies.df)
names(frequencies.df)[names(frequencies.df)=="-"]<-"indel" # for ease of handling below
frequencies.df$row<-1:nrow(frequencies.df)
frequencies.df %>% gather(var,freq.var,A:indel)->frequencies.df # long form
subset(frequencies.df,freq.var>=stringent_freq & var!="indel")->less_stringent
test_counts<-test(deepsnv.result)
ctrl_counts<-control(deepsnv.result)
less_stringent %>% adply(1,get_counts,test_counts,ctrl_counts) -> less_stringent.format # formatted like deepsnv df
RF(control(deepsnv.result),total=T)->con.freq
cbind(coordinates(deepsnv.result),con.freq)->df.con
set_cord<-function(deepsnv.result,freqs){
positions<-data.frame(chr=character(),
pos = integer())
cors<-coordinates(deepsnv.result)
for(i in 1:(length(names(cors))/2)){
seg = paste('chr',i,sep=".")
pos_col = paste('pos',i,sep=".")
seg.df<-data.frame(chr=cors[,seg],pos = cors[,pos_col])
positions<-rbind(positions,seg.df)
}
cbind(positions,freqs)->frequencies.df
}
frequencies.df<-set_cord(deepsnv.result,frequencies)
df.con<-set_cord(deepsnv.result,con.freq)
head(df.con)
names(df.con)[ncol(df.con)]<-"indel"
df.con %>% gather(ref,freq.var,A:indel)->con.freqs
subset(con.freqs,freq.var>0.5,select=c(chr,pos,ref))->con.major
less_stringent.final<-join(less_stringent.format,con.major)
for(c in names(deepsnv_sum)){
if(c %in% names(less_stringent.final)==F){
less_stringent.final[,c]=NA
}
}
less_stringent.final<-subset(less_stringent.final,select=-c(row))
head(less_stringent.final)
deepsnv_sum<-rbind(deepsnv_sum,less_stringent.final)
deepsnv_sum<-deepsnv_sum[order(deepsnv_sum$chr,deepsnv_sum$pos),]
head(deepsnv_sum)
less_stringent.final<-join(less_stringent.format,con.major)
for(c in names(deepsnv_sum)){
if(c %in% names(less_stringent.final)==F){
less_stringent.final[,c]=NA
}
}
consensus_fa<-consensusSequence(test(deepsnv.result,total=T),vector=F,haploid=T)
head(less_stringent.format)
consensus_fa[4]
consensus_fa[100]
subset(less_stringent.format,row==100)
subset(less_stringent.format,row==100,select=c(var))[1]
subset(less_stringent.format,row==100,select=c(var))
consensus_fa[674]
subset(less_stringent.format,row==674,select=c(var))
subset(less_stringent.format,row==1555,select=c(var))
consensus_fa[1555]
consensus_fa[1555]==subset(less_stringent.format,row==1555,select=c(var))
consensus_fa[1555]==subset(less_stringent.format,row==1555,select=c(var))[1]
consensus_fa[1555]==less_stringent.format$[var][less_stringent.format$row==1555]
consensus_fa[1555]==less_stringent.format$var[less_stringent.format$row==1555]
consensus_fa[1555]==as.character(less_stringent.format$var[less_stringent.format$row==1555])
as.character(consensus_fa[1555])==as.character(less_stringent.format$var[less_stringent.format$row==1555])
for( in in less_stringent.format$row){
for( i in less_stringent.format$row){
if(as.character(consensus_fa[i])!=as.character(less_stringent.format$var[less_stringent.format$row==i])){
print(subset(less_stringent.format,row==i))}
}
head(less_stringent.format)
less_stringent.final<-join(less_stringent.format,con.major)
for(c in names(deepsnv_sum)){
if(c %in% names(less_stringent.final)==F){
less_stringent.final[,c]=NA
}
}
for( i in less_stringent.final$row){
if(as.character(consensus_fa[i])!=as.character(less_stringent.final$var[less_stringent.format$row==i])){
print(subset(less_stringent.format,row==i))}}
control_fa<-consensusSequence(control(deepsnv.result,total=T),vector=F,haploid=T)
for( i in less_stringent.final$row){
if(as.character(control_fa[i])!=as.character(less_stringent.final$ref[less_stringent.format$row==i])){
print(subset(less_stringent.final,row==i))}}
deepsnv_sum<-rbind(deepsnv_sum,less_stringent.final)
deepsnv_sum<-deepsnv_sum[order(deepsnv_sum$chr,deepsnv_sum$pos),]
less_stringent.final<-subset(less_stringent.final,select=-c(row))
deepsnv_sum<-rbind(deepsnv_sum,less_stringent.final)
deepsnv_sum<-deepsnv_sum[order(deepsnv_sum$chr,deepsnv_sum$pos),]
subset(deepsnv_sum,p.val<0.05)
deepsnv_sum %>% subset(chr=="PA" & pos == 416)
test_file_prefix = basename(file_path_sans_ext(test.bam))
control_file_prefix = basename(file_path_sans_ext(control.bam))
output_file_name = paste0("deepSNV/",test_file_prefix)
sample_name=strsplit(test_file_prefix,".",fixed=T)[[1]][1]
control_name=strsplit(control_file_prefix,".",fixed=T)[[1]][1]
output_file_control=paste0("deepSNV/",control_file_prefix)
print(paste0("test is :",sample_name ))
print(paste0("control is:",control_name))
cat("calling variants with deepSNV\n")
cat(paste("\ttest [",test.bam,"]\n\tcontrol [",control.bam,"]...\n", sep=""))
deepsnv.result <- deepSNV(test=test.bam, control=control.bam, regions=regions.bed,combine.method=p.com.meth,q=30) # This calls the variants using the binomial
if(disp=="two.sided"){
deepsnv.result<-estimateDispersion(deepsnv.result,alternative="two.sided")
}else if (disp=="one.sided"){
deepsnv.result<-estimateDispersion(deepsnv.result) # one sided is the default
}else{
deepsnv.result<-deepsnv.result
}
deepsnv_sum<-summary(deepsnv.result,sig.level=as.numeric(p.cut), adjust.method=method)
# filter to stringent freq
deepsnv_sum<-subset(deepsnv_sum,freq.var<stringent_freq)
## Add bases above stringent freq
RF(test(deepsnv.result),total=T)->frequencies # Get the frequencies of all the bases at each position
## set up coordinates
frequencies.df<-set_cord(deepsnv.result,frequencies)
names(frequencies.df)[names(frequencies.df)=="-"]<-"indel" # for ease of handling below
frequencies.df$row<-1:nrow(frequencies.df)
frequencies.df %>% gather(var,freq.var,A:indel)->frequencies.df # long form
subset(frequencies.df,freq.var>=stringent_freq & var!="indel")->less_stringent
test_counts<-test(deepsnv.result)
ctrl_counts<-control(deepsnv.result)
less_stringent %>% adply(1,get_counts,test_counts,ctrl_counts) -> less_stringent.format # formatted like deepsnv df
## Now we get the reference base from the control matrix ######
RF(control(deepsnv.result),total=T)->con.freq
df.con<-set_cord(deepsnv.result,con.freq)
names(df.con)[ncol(df.con)]<-"indel"
df.con %>% gather(ref,freq.var,A:indel)->con.freqs
subset(con.freqs,freq.var>0.5,select=c(chr,pos,ref))->con.major
less_stringent.final<-join(less_stringent.format,con.major)
for(c in names(deepsnv_sum)){
if(c %in% names(less_stringent.final)==F){
less_stringent.final[,c]=NA
}
}
less_stringent.final<-subset(less_stringent.final,select=-c(row))
deepsnv_sum<-rbind(deepsnv_sum,less_stringent.final)
deepsnv_sum<-deepsnv_sum[order(deepsnv_sum$chr,deepsnv_sum$pos),]
deepsnv_sum %>% subset(chr=="PA" & pos == 416)
consensus_fa<-consensusSequence(test(deepsnv.result,total=T),vector=F,haploid=T)
control_fa<-consensusSequence(control(deepsnv.result,total=T),vector=F,haploid=T)
cov<-rowSums(test(deepsnv.result,total=T)[,1:4]) # no deletions sum of all bases calls at each position (row)
cov.df=data.frame(coverage=cov,concat.pos=1:length(cov))
prior.seg.length<-c()
for(k in 1:length(regions.bed$chr)){
prior.seg.length[k]<-sum(regions.bed$stop[1:k])  # the end positions of each segment relative to one sequence not including the trimming step
}
prior.seg.length<-c(0,prior.seg.length)
ddply(cov.df,~concat.pos,summarize, coverage=coverage,concat.pos=concat.pos,chr= as.character(regions.bed$chr[max(which(prior.seg.length<concat.pos))]),
chr.pos=concat.pos-prior.seg.length[max(which(prior.seg.length<concat.pos))])->cov.df
old<-cov.df
head(cov.df)
cov.df<-set_cord(deepsnv.result,cov.df)
head(cov.df)
tail(cov.df)
View(coverage_plots)
